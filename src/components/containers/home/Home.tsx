import React, { useEffect, useState } from 'react';
import { Box, Heading, Text, Grid, GridItem, VStack, Icon, Button, Divider } from '@chakra-ui/react';
import { FaBookOpen, FaUsers, FaLightbulb, FaHandsHelping  } from 'react-icons/fa';
//import useCheckMembership from '../../../utils/useCheckMembership';
import NextLink from 'next/link';
import { JsonRpcProvider, ethers, Contract } from 'ethers';
import haikuContractABI from '../../ABI/HaikuEditions.json';
import nftContractABI from '../../ABI/ABI_ART.json';
import DynamicCarousel from '../../../utils/DynamicCarousel'; // Assurez-vous d'importer le bon chemin
import HeroSection from '../../../utils/HeroSection'; // Assurez-vous d'importer le bon chemin
import ABIRESCOLLECTION from '../../ABI/ABI_Collections.json';
import { useRouter } from 'next/router';

const contractRESCOLLECTION = process.env.NEXT_PUBLIC_RESCOLLECTIONS_CONTRACT!;


const Home = () => {
const [isLoading, setIsLoading] = useState(false);
const router = useRouter();

interface Haiku {
  poemText: string;
  poet?: string;
}

const [haikus, setHaikus] = useState<Haiku[]>([]); // Typage de l'√©tat


interface Nft {
  id: string;
  image: string;
  name?: string;
  artist?: string;
  content: {
    tokenId: string;
    mintContractAddress: string;
  };
}

    interface Collection {
      id: string;
      name: string;
      collectionType: string;
      artist?: string;
      imageUrl: string;
      mintContractAddress: string[];
      isFeatured: boolean;

    }

// Typage de l'√©tat `nfts` avec `Nft[]` (un tableau d'objets de type Nft)
const [nfts, setNfts] = useState<Nft[]>([]);

const [collections, setCollections] = useState<Collection[]>([]);


const provider = new JsonRpcProvider(process.env.NEXT_PUBLIC_URL_SERVER_MORALIS);
const contract = new Contract(contractRESCOLLECTION, ABIRESCOLLECTION, provider);

// R√©cup√©rer les collections
const fetchCollections = async () => {
  setIsLoading(true);
  try {
    const total = await contract.getTotalCollectionsMinted();
    const collectionsPaginated = await contract.getCollectionsPaginated(0, total);

    type CollectionTuple = [number, string, string, string, string[], boolean, boolean];

    const collectionsData = await Promise.all(
      collectionsPaginated.map(async (tuple: CollectionTuple) => {
        const [id, name, collectionType, creator, associatedAddresses, isActive, isFeatured] = tuple;

        // üîπ V√©rifier si la collection est mise en avant
        if (!isFeatured) return null;

        const uri = await contract.getCollectionURI(id);
        const mintContractAddress = associatedAddresses;

        const cachedMetadata = localStorage.getItem(uri);
        if (cachedMetadata) {
          const metadata = JSON.parse(cachedMetadata);
          return {
            id: id.toString(),
            name,
            collectionType,
            imageUrl: metadata.image,
            mintContractAddress,
            isFeatured,
            creator,
          };
        }

        const response = await fetch(`/api/proxyPinata?ipfsHash=${uri.split('/').pop()}`);
        const metadata = await response.json();
        localStorage.setItem(uri, JSON.stringify(metadata));

        return {
          id: id.toString(),
          name,
          collectionType,
          imageUrl: metadata.image,
          mintContractAddress,
          isFeatured,
          creator,
        };
      })
    );

    // üîπ Filtrer les valeurs nulles apr√®s l'ex√©cution des promesses
    const filteredCollections = collectionsData.filter(
      (collection): collection is Collection => collection !== null
    );

    // üîπ Trier les collections mises en avant (m√™me si elles le sont d√©j√†)
    const sortedCollections = filteredCollections.sort((a, b) => {
      return Number(b.isFeatured) - Number(a.isFeatured);
    });

    setCollections(sortedCollections); // Mise √† jour de l'√©tat avec les collections filtr√©es
    //console.log(collections)
  } catch (error) {;
    console.error('Error fetching collections:', error);
  } finally {
    setIsLoading(false);
  }
};



// R√©cup√©rer les po√®mes (haikus)
const fetchPoems = async (collectionId: string, associatedAddress: string) => {
  setIsLoading(true);
  try {
    const collectionContract = new Contract(associatedAddress, haikuContractABI, provider);
    const uniqueTokenCount = await collectionContract.getLastUniqueHaikusMinted();  //Nombre de poemes unique dans la collection (independant du nombre d'editions)

    const tokenIds = Array.from({ length: Number(uniqueTokenCount) }, (_, i) => i + 2);

    const poemsData = await Promise.all(
      tokenIds.map(async (tokenId) => {
        const haikuText = await collectionContract.getTokenFullDetails(tokenId);

        const creatorAddress = haikuText[7];
        //console.log(creatorAddress);

        const totalEditions = await collectionContract.getRemainingEditions(tokenId);
        //console.log(totalEditions);
        //const price = haikuText[4];

        return {
          tokenId: tokenId.toString(),
          poemText: haikuText,
          /*}
          creatorAddress,
          totalEditions: totalEditions.toString(),
          mintContractAddress: associatedAddress,
          price: price.toString(),
          */
        };
      })
    );

    setHaikus(poemsData);
    //console.log(poemsData);

  } catch (error) {
    console.error('Error fetching poems:', error);
  } finally {
    setIsLoading(false);
  }
};

// R√©cup√©rer les NFTs
const fetchNFTs = async (collectionId: string, associatedAddress: string) => {
    setIsLoading(true);
    try {
        const collectionContract = new Contract(associatedAddress, nftContractABI, provider);
        console.log(collectionContract);
        /*let max = await collectionContract.getLastMintedTokenId();  //Penser a ajouter cette fonction ou un similaire


        if(max > 10){
          max = 10;
        }
        */
        const max = 10;
        const tokenIds = await collectionContract.getTokenPaginated(0, max);

        const nftsData = await Promise.all(
            tokenIds.map(async (tokenId: string) => {
                try {
                    // Essayer d'acc√©der √† tokenURI tout en g√©rant l'erreur si le token a √©t√© br√ªl√©
                    let tokenURI: string;
                    try {
                        tokenURI = await collectionContract.tokenURI(tokenId);
                    } catch (tokenError) {
                        // Si le token n'existe pas, loguer un avertissement et passer au suivant
                        console.warn(`Le token avec le tokenId ${tokenId} n'existe pas.`);
                        return null; // Retourner null pour cet NFT
                    }

                    const cachedMetadata = localStorage.getItem(tokenURI);
                    const metadata = cachedMetadata ? JSON.parse(cachedMetadata) : await (await fetch(`/api/proxyPinata?ipfsHash=${tokenURI.split('/').pop()}`)).json();

                    if (!cachedMetadata) {
                        localStorage.setItem(tokenURI, JSON.stringify(metadata));
                    }

                    return {
                        tokenId: tokenId.toString(),
                        image: metadata.image,
                        name: metadata.name,
                        description: metadata.description,
                        price: metadata.price || 'Non d√©fini',
                        tags: metadata.tags || [],
                        mintContractAddress: associatedAddress,
                        artist: metadata.artist,
                    };
                } catch (error) {
                    console.error(`Erreur lors de la r√©cup√©ration des m√©tadonn√©es pour le tokenId ${tokenId}:`, error);
                    return null; // Ignorez les tokens dont les m√©tadonn√©es ne peuvent pas √™tre r√©cup√©r√©es
                }
            })
        );

        // Filtrer les r√©sultats null pour √©viter d'afficher les NFTs inexistants
        setNfts(nftsData.filter(nft => nft !== null));
    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des NFTs :', error);
    } finally {
        setIsLoading(false);
    }
};


// Charger les collections et les NFTs / Po√®mes
useEffect(() => {
  fetchCollections();
}, []);


useEffect(() => {
  if (collections.length > 0) {
    const artCollections = collections.filter((collection: Collection) => collection.collectionType === 'Art');
    const poetryCollections = collections.filter((collection: Collection) => collection.collectionType === 'Poesie');

    if (artCollections.length > 0) {
      const randomArtCollection = artCollections[Math.floor(Math.random() * artCollections.length)];

      if (
        typeof randomArtCollection.id === 'string' &&
        typeof randomArtCollection.mintContractAddress === 'string' // On v√©rifie que c'est bien une string
      ) {
        const artCollectionId = randomArtCollection.id;
        const artCollectionMintContractAddress = randomArtCollection.mintContractAddress; // On r√©cup√®re directement la string
        fetchNFTs(artCollectionId, artCollectionMintContractAddress);
      } else {
        console.error('Propri√©t√©s id et/ou mintContractAddress manquantes ou de type invalide dans l\'objet randomArtCollection');
      }
    }

    if (poetryCollections.length > 0) {
      const randomPoetryCollection = poetryCollections[Math.floor(Math.random() * poetryCollections.length)];
      if (
        typeof randomPoetryCollection.id === 'string' &&
        typeof randomPoetryCollection.mintContractAddress === 'string'
      ) {
        const poetryCollectionId = randomPoetryCollection.id;
        const poetryCollectionMintContractAddress = randomPoetryCollection.mintContractAddress;

        fetchPoems(poetryCollectionId, poetryCollectionMintContractAddress);
      } else {
        console.error('Propri√©t√©s id et/ou mintContractAddress manquantes ou de type invalide dans l\'objet randomPoetryCollection');
      }
    }
  }
}, [collections]);





// V√©rifie la longueur des donn√©es pour √©viter d'essayer d'afficher des √©l√©ments vides
const getRandomItems = (array: Collection[], count: number): Collection[] => {
  return array.length > 0 ? array.sort(() => 0.5 - Math.random()).slice(0, Math.min(count, array.length)) : [];
};

    const maxBoxHeight = "150px"; // Hauteur max pour toutes les bo√Ætes

    return (
      <Box p={5} textAlign="center">
        {/* Ajout de marge entre le HeroSection et le titre */}
        <Heading as="h1" size="xl" mb={5}>
          Bienvenue sur le premier r√©seau solidaire exp√©rimental <br /> d'art digital en France
        </Heading>

        <Box
          bgSize="cover"
          bgPosition="center"
          py={10}
          mt={10}
          p={4}
          color="white"
          textAlign="center"
        >
          <HeroSection nfts={nfts} haikus={haikus} />

          <Box
            mt={2}
            textAlign="center"
            p={2}
            borderWidth={1}
            borderRadius="lg"
            borderColor="gray.300"
            maxWidth="100%" // Limite la largeur de la box
            mx="auto"
          >
            <Text fontSize="lg">
              Pour une meilleure exp√©rience sur smartphone, <br /> utilisez le navigateur int√©gr√© √† votre wallet
            </Text>
          </Box>

        </Box>

        <Box mt={6}>
          <Text fontSize="lg" mb={6}>
            D√©couvrez, soutenez, participez.
          </Text>
          <NextLink href="/adhesion" passHref>
            <Button colorScheme="pink" size="lg">Adh√©rez Maintenant</Button>
          </NextLink>
        </Box>

        <Heading size="xl" mb={6} mt={12}>
          Rejoignez un r√©seau d'art num√©rique et de po√©sie solidaire
        </Heading>

        <VStack spacing={8} mt={10} textAlign="center">
          <Heading as="h2" size="lg" mb={5}>
            Nos missions :
          </Heading>
          <Text fontSize="md" maxW="700px" mx="auto">
            RESCOE soutient les artistes √©mergents en leur offrant un acc√®s privil√©gi√© √† des outils num√©riques innovants, leur permettant de d√©velopper leur art √† travers l'art g√©n√©ratif, la blockchain et l'art digital. <br /> Notre mission est de favoriser l'√©mergence de ce nouveau courant artistique en organisant des ateliers d'initiation au crypto-art, o√π chacun peut cr√©er et minter ses premi√®res ≈ìuvres sur notre plateforme d√©centralis√©e, tout en assurant la vente et la protection de ses droits.
          </Text>

          <Divider my={6} borderColor="gray.200" w="80%" mx="auto" />

          <Grid templateColumns={{ base: '1fr', md: 'repeat(3, 1fr)' }} gap={6}>
            <GridItem>
              <Box textAlign="center">
                <Icon as={FaLightbulb} boxSize={8} mb={3} />
                <Heading as="h2" size="lg" mb={2}>Un r√©seau solidaire</Heading>
                <Text fontSize="md">
                  Faites partie d'un r√©seau unique, d√©di√© √† la promotion de l'art digital et √† l'int√©gration de la blockchain dans les pratiques artistiques, tout en soutenant l'acc√®s aux outils num√©riques pour les artistes.
                </Text>
              </Box>
            </GridItem>
            <GridItem>
              <Box textAlign="center">
                <Icon as={FaHandsHelping} boxSize={8} mb={3} />
                <Heading as="h2" size="lg" mb={2}>Engag√© pour l'art</Heading>
                <Text fontSize="md">
                  En rejoignant RESCOE, vous soutenez directement des artistes √©mergents et contribuez √† un projet artistique innovant visant √† dynamiser la sc√®ne artistique fran√ßaise.
                </Text>
              </Box>
            </GridItem>
            <GridItem>
              <Box textAlign="center">
                <Icon as={FaBookOpen} boxSize={8} mb={3} />
                <Heading as="h2" size="lg" mb={2}>Po√©tique et technologique</Heading>
                <Text fontSize="md">
                  RESCOE permet aux artistes et po√®tes de cr√©er, vendre et prot√©ger leurs droits, en garantissant l'authenticit√© de leur propri√©t√© intellectuelle via la blockchain, tout en explorant les potentialit√©s des technologies et du num√©rique dans l'art et la po√©sie.
                </Text>
              </Box>
            </GridItem>
          </Grid>

          <Divider my={6} borderColor="gray.200" w="80%" mx="auto" />

          <Button
            colorScheme="teal"
            size="lg"
            mt={6}
            as="a"
            href="/association/rescoe"
            _hover={{ textDecoration: 'none' }}
          >
            En savoir plus sur l'association
          </Button>

          <Divider my={6} borderColor="gray.200" w="100%" mx="auto" />
          <Heading as="h2" size="lg" mb={5}>
            Quelques cr√©ations et po√®mes associ√©s al√©atoirement :
          </Heading>
          <Text fontSize="md" maxW="700px" mx="auto">
            Parfois les artistes et po√®tes collaborent, parfois le hasard les fait se rencontrer !
          </Text>

          <DynamicCarousel nfts={nfts} haikus={haikus} />
        </VStack>
      </Box>
    );
  };


export default Home;
